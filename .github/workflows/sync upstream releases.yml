# Sync all releases from MoonTechLab/Selene into this repository (create releases and upload assets)
# - 分页获取上游仓库所有 releases（per_page=100）
# - 若当前仓库不存在同名 tag 的 release，则：
#     1) 下载上游 release 的所有 assets 到 upstream-assets/<tag>/
#     2) 在当前仓库创建同名 release（保留 name、body、draft、prerelease）
#     3) 上传对应的 assets 到新创建的 release
# - 支持手动触发（workflow_dispatch）和定时触发（每天 UTC 03:00，按需调整）
#
# 使用说明：
# - 默认从 MoonTechLab/Selene 拉取。若需改变源仓库，可在 "Run workflow" 输入中修改 upstream_owner/upstream_repo。
# - 请确保本仓库的 secrets.GITHUB_TOKEN 或其他 token 有创建 release 与上传资产的权限（Repository permissions -> Actions -> Workflow permissions）。
#
on:
  workflow_dispatch:
    inputs:
      upstream_owner:
        description: 'Upstream owner (default: MoonTechLab)'
        required: false
        default: 'MoonTechLab'
      upstream_repo:
        description: 'Upstream repo (default: Selene)'
        required: false
        default: 'Selene'
      per_page:
        description: 'Releases per page (max 100)'
        required: false
        default: '100'
  schedule:
    - cron: '0 */6 * * *'

concurrency:
  group: sync-upstream-releases
  cancel-in-progress: false

jobs:
  sync-releases:
    runs-on: ubuntu-latest
    env:
      # 可在 workflow_dispatch 时覆盖 upstream_owner/upstream_repo/per_page
      PER_PAGE: ${{ github.event.inputs.per_page || '100' }}
    steps:
      - name: Checkout repo (needed for GitHub context)
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq python3

      - name: Sync all upstream releases to this repo
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          UPSTREAM_OWNER: ${{ github.event.inputs.upstream_owner || 'MoonTechLab' }}
          UPSTREAM_REPO: ${{ github.event.inputs.upstream_repo || 'Selene' }}
          PER_PAGE: ${{ env.PER_PAGE }}
        run: |
          set -euo pipefail

          if [ -z "${GH_TOKEN:-}" ]; then
            echo "Error: GH_TOKEN (secrets.GITHUB_TOKEN) is not set. Exiting."
            exit 1
          fi

          UPSTREAM="${UPSTREAM_OWNER}/${UPSTREAM_REPO}"
          echo "Syncing releases from $UPSTREAM into ${GITHUB_REPOSITORY}"
          mkdir -p upstream-assets

          page=1
          while true; do
            echo "Fetching releases page $page"
            releases=$(curl -s -H "Authorization: token $GH_TOKEN" \
              "https://api.github.com/repos/${UPSTREAM_OWNER}/${UPSTREAM_REPO}/releases?per_page=${PER_PAGE}&page=${page}")

            # 如果本页没有条目则结束
            count=$(echo "$releases" | jq 'length')
            if [ "$count" -eq 0 ]; then
              echo "No more releases (page $page empty)."
              break
            fi

            echo "Processing $count releases from page $page"
            echo "$releases" | jq -c '.[]' | while read -r rel; do
              tag_name=$(echo "$rel" | jq -r '.tag_name')
              # 防止空 tag
              if [ -z "$tag_name" ] || [ "$tag_name" = "null" ]; then
                echo "Skipping release with empty tag"
                continue
              fi

              release_name=$(echo "$rel" | jq -r '.name // ""')
              release_body=$(echo "$rel" | jq -r '.body // ""')
              draft=$(echo "$rel" | jq -r '.draft')
              prerelease=$(echo "$rel" | jq -r '.prerelease')

              echo "Checking tag $tag_name..."
              status_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token $GH_TOKEN" \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${tag_name}")

              if [ "$status_code" -eq 200 ]; then
                echo "Release with tag $tag_name already exists in ${GITHUB_REPOSITORY}, skipping."
                continue
              fi

              echo "Downloading assets for $tag_name (if any)..."
              safe_tag=$(echo "$tag_name" | sed 's/[^A-Za-z0-9._-]/_/g')
              safe_dir="upstream-assets/${safe_tag}"
              mkdir -p "$safe_dir"
              echo "$rel" | jq -r '.assets[]?.browser_download_url' | while read -r asset_url; do
                if [ -z "$asset_url" ] || [ "$asset_url" = "null" ]; then
                  continue
                fi
                fname=$(basename "$asset_url")
                echo "  - Downloading $fname"
                # 使用 -L 跟随重定向；带上 token 以便访问私有资源（若是公开仓库也无害）
                curl -sL -H "Authorization: token $GH_TOKEN" "$asset_url" -o "${safe_dir}/${fname}" \
                  || echo "    Warning: failed to download asset $fname from $asset_url"
              done

              echo "Creating release $tag_name in ${GITHUB_REPOSITORY}..."
              payload=$(jq -nc --arg tag "$tag_name" --arg name "$release_name" --arg body "$release_body" \
                --argjson draft "$draft" --argjson prerelease "$prerelease" \
                '{ tag_name: $tag, name: $name, body: $body, draft: $draft, prerelease: $prerelease }')

              create_resp=$(curl -s -H "Authorization: token $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
                -d "$payload" "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")

              upload_url=$(echo "$create_resp" | jq -r '.upload_url // empty')
              message=$(echo "$create_resp" | jq -r '.message // empty')

              if [ -z "$upload_url" ]; then
                echo "Failed to create release for $tag_name: $message"
                # 继续处理下一个 release，而不是退出整个流程
                continue
              fi

              echo "Upload URL obtained. Uploading assets for $tag_name..."
              # 去除 upload_url 中的模板部分 "{?name,label}"
              base_upload_url="${upload_url%%\{*}"

              if compgen -G "${safe_dir}/*" > /dev/null; then
                for f in "${safe_dir}"/*; do
                  [ -f "$f" ] || continue
                  fname=$(basename "$f")
                  echo "  - Uploading $fname ..."
                  # URL-encode filename using python3 (available on ubuntu-latest)
                  encoded_name=$(python3 -c "import urllib.parse,sys; print(urllib.parse.quote(sys.argv[1]))" "$fname")
                  upload_endpoint="${base_upload_url}?name=${encoded_name}"
                  # 上传资产
                  curl -s --fail -X POST -H "Authorization: token $GH_TOKEN" \
                    -H "Content-Type: application/octet-stream" --data-binary @"$f" "$upload_endpoint" \
                    || echo "    Warning: failed to upload asset $fname for $tag_name"
                done
              else
                echo "  - No assets to upload for $tag_name."
              fi

              echo "Release $tag_name created successfully (if no errors above)."

            done

            page=$((page + 1))
          done

          echo "All pages processed."